/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package forme;

import controller.KlijentController;
import domain.Racun;
import domain.VrstaUsluge;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import modeli.TableModelRacun;

/**
 *
 * @author korisnk
 */
public class FormaPretraziRacun extends javax.swing.JDialog {
    
    private static final java.util.logging.Logger logger = java.util.logging.Logger.getLogger(FormaPretraziRacun.class.getName());

    List<Racun> sviRacuni = new ArrayList<>();
     /**
     * Creates new form FormaPretraziRacun
     */
    
    
    public FormaPretraziRacun(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        jComboBoxStavkeKriterijuma.setEnabled(false);
        jComboBoxStavkeKriterijuma.setVisible(false);
        setTitle("Pretrazi racun");
        
        TableModelRacun model = new TableModelRacun();
        jTableRacuni.setModel(model);
        
        ucitajSveRacune();
        jButtonFiltriraj.addActionListener(e -> applyFilter());
        popuniComboBox((String) jComboBoxKriterijum.getSelectedItem());
        
    }

    
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTableRacuni = new javax.swing.JTable();
        jButtonDetaljiRacuna = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jComboBoxKriterijum = new javax.swing.JComboBox<>();
        jTextFieldDatumOd = new javax.swing.JTextField();
        jComboBoxStavkeKriterijuma = new javax.swing.JComboBox<>();
        jTextFieldDatumDo = new javax.swing.JTextField();
        jLabelDatumOd = new javax.swing.JLabel();
        jLabelDatumDo = new javax.swing.JLabel();
        jButtonFiltriraj = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jTableRacuni.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTableRacuni);

        jButtonDetaljiRacuna.setText("DETALJI RACUNA");
        jButtonDetaljiRacuna.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDetaljiRacunaActionPerformed(evt);
            }
        });

        jLabel1.setText("Filtriraj racun prema:");

        jComboBoxKriterijum.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "racunu", "recepcioneru", "gostu", "vrsti usluge" }));
        jComboBoxKriterijum.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxKriterijumActionPerformed(evt);
            }
        });

        jLabelDatumOd.setText("Datum od:");

        jLabelDatumDo.setText("Datum do:");

        jButtonFiltriraj.setText("Filtriraj");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 514, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabelDatumOd, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jTextFieldDatumOd, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jComboBoxKriterijum, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jComboBoxStavkeKriterijuma, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabelDatumDo, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jTextFieldDatumDo, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(18, 18, 18)
                .addComponent(jButtonFiltriraj, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(195, 195, 195)
                .addComponent(jButtonDetaljiRacuna, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(56, 56, 56)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxKriterijum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxStavkeKriterijuma, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldDatumOd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldDatumDo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelDatumOd)
                    .addComponent(jLabelDatumDo)
                    .addComponent(jButtonFiltriraj, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButtonDetaljiRacuna)
                .addGap(18, 18, 18))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jComboBoxKriterijumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxKriterijumActionPerformed
        
        String kriterijum = (String) jComboBoxKriterijum.getSelectedItem();
        switch (kriterijum) {
            case "racunu":
                jComboBoxStavkeKriterijuma.setEnabled(false);
                jComboBoxStavkeKriterijuma.setVisible(false);
                jLabelDatumOd.setVisible(true);
                jTextFieldDatumDo.setVisible(true);
                jTextFieldDatumOd.setVisible(true);
                jLabelDatumDo.setVisible(true);
                break;
            case "recepcioneru":
                jLabelDatumOd.setVisible(false);
                jTextFieldDatumDo.setVisible(false);
                jTextFieldDatumOd.setVisible(false);
                jLabelDatumDo.setVisible(false);
                jComboBoxStavkeKriterijuma.setEnabled(true);
                jComboBoxStavkeKriterijuma.setVisible(true);
                break;
            case "gostu":
                jLabelDatumOd.setVisible(false);
                jTextFieldDatumDo.setVisible(false);
                jTextFieldDatumOd.setVisible(false);
                jLabelDatumDo.setVisible(false);
                jComboBoxStavkeKriterijuma.setEnabled(true);
                jComboBoxStavkeKriterijuma.setVisible(true);
                break;
            case "vrsti usluge":
                jLabelDatumOd.setVisible(false);
                jTextFieldDatumDo.setVisible(false);
                jTextFieldDatumOd.setVisible(false);
                jLabelDatumDo.setVisible(false);
                jComboBoxStavkeKriterijuma.setEnabled(true);
                jComboBoxStavkeKriterijuma.setVisible(true);
                break;    
                
            default:
                throw new AssertionError();
        }
        jTextFieldDatumOd.setText("");
        jTextFieldDatumDo.setText("");
        popuniComboBox((String) jComboBoxKriterijum.getSelectedItem());
        if (!"racunu".equals(jComboBoxKriterijum.getSelectedItem())) {
            applyFilter();
        }

    }//GEN-LAST:event_jComboBoxKriterijumActionPerformed

    private void jButtonDetaljiRacunaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDetaljiRacunaActionPerformed
        
        int viewRow = jTableRacuni.getSelectedRow();
        if (viewRow == -1) {
            JOptionPane.showMessageDialog(this, "Izaberi racun iz tabele.");
            return;
        }
        int modelRow = jTableRacuni.convertRowIndexToModel(viewRow);
        TableModelRacun tm = (TableModelRacun) jTableRacuni.getModel();
        Racun osnovni = tm.getAt(modelRow);

        Racun racunSaStavkama;
        try {
            racunSaStavkama = KlijentController.getInstance().getRacunById(osnovni.getIdRacuna());
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Sistem ne moze da nadje racun.");
            return;
        }

        FormaDetaljiRacuna d = new FormaDetaljiRacuna(null, true, racunSaStavkama);
        d.setLocationRelativeTo(this);
        d.setVisible(true);
        
        
    }//GEN-LAST:event_jButtonDetaljiRacunaActionPerformed

    private java.time.format.DateTimeFormatter DF = java.time.format.DateTimeFormatter.ofPattern("dd.MM.yyyy");

    private java.time.LocalDate parseDateOrError(String txt, String fieldName) {
        if (txt == null || txt.isBlank()) {
        JOptionPane.showMessageDialog(this, fieldName + " je obavezan.",
                "Greska", JOptionPane.ERROR_MESSAGE);
        return null;
    }

    String norm = txt.trim();
    if (norm.endsWith(".") || norm.endsWith("-")) {
        norm = norm.substring(0, norm.length() - 1);
    }

    try {
        return java.time.LocalDate.parse(norm, java.time.format.DateTimeFormatter.ofPattern("d.M.yyyy"));
    } catch (java.time.format.DateTimeParseException e1) {
        try {
            return java.time.LocalDate.parse(norm, java.time.format.DateTimeFormatter.ofPattern("d-M-yyyy"));
        } catch (java.time.format.DateTimeParseException e2) {
            JOptionPane.showMessageDialog(this, fieldName + " nije validan datum (očekujem dd.MM.yyyy ili dd-MM-yyyy).",
                    "Greska", JOptionPane.ERROR_MESSAGE);
            return null;
        }
    }
    }

    private void showError(String msg) {
        javax.swing.JOptionPane.showMessageDialog(this, msg, "Greska", javax.swing.JOptionPane.ERROR_MESSAGE);
    }

    private void setTableData(java.util.List<domain.Racun> racuni) {
        ((TableModelRacun) jTableRacuni.getModel()).setRacuni(racuni);
         if (racuni == null || racuni.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Nema racuna za odabrani kriterijum.", "Obavestenje", JOptionPane.INFORMATION_MESSAGE);
        }
    }
    
    
private void ucitajSveRacune() {
    try {
        sviRacuni = controller.KlijentController.getInstance().getAllRacun(new domain.Racun());
        setTableData(sviRacuni);
    } catch (Exception ex) {
        logger.log(java.util.logging.Level.SEVERE, "Greska pri ucitavanju racuna", ex);
        showError("Ne mogu da ucitam racune.");
    }
}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonDetaljiRacuna;
    private javax.swing.JButton jButtonFiltriraj;
    private javax.swing.JComboBox<String> jComboBoxKriterijum;
    private javax.swing.JComboBox<Object> jComboBoxStavkeKriterijuma;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabelDatumDo;
    private javax.swing.JLabel jLabelDatumOd;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableRacuni;
    private javax.swing.JTextField jTextFieldDatumDo;
    private javax.swing.JTextField jTextFieldDatumOd;
    // End of variables declaration//GEN-END:variables

    private void applyFilter() {
        String kriterijum = (String) jComboBoxKriterijum.getSelectedItem();
    List<domain.Racun> rezultat = new ArrayList<>();

    try {
        switch (kriterijum) {

            case "racunu": {
                java.time.LocalDate ldOd = parseDateOrError(jTextFieldDatumOd.getText(), "Datum od");
                if (ldOd == null) return;
                java.time.LocalDate ldDo = parseDateOrError(jTextFieldDatumDo.getText(), "Datum do");
                if (ldDo == null) return;
                if (ldOd.isAfter(ldDo)) { 
                    showError("'Datum od' ne moze biti posle 'Datum do'."); 
                    return; 
                }

                for (domain.Racun r : sviRacuni) {
                    java.time.LocalDate d = toLocalDate(r.getDatumIzdavanja());
                    if (d == null) continue; 
                    if (!d.isBefore(ldOd) && !d.isAfter(ldDo)) {
                        rezultat.add(r);
                    }
                }
                break;
            }

            case "gostu": {
                Object sel = jComboBoxStavkeKriterijuma.getSelectedItem();
                if (!(sel instanceof domain.Gost)) { 
                    showError("Greska, gost nije odabran!"); 
                    return; 
                }

                Racun filter = new Racun();
                filter.setGost((domain.Gost) sel);

                ArrayList<domain.Racun> lista =
                        controller.KlijentController.getInstance().getAllRacun(filter);

                setTableData(lista);
                return;
            }

            case "recepcioneru": {
                Object sel = jComboBoxStavkeKriterijuma.getSelectedItem();
                if (!(sel instanceof domain.Recepcioner)) { 
                    showError("Izaberi recepcionera."); 
                    return; 
                }
                int rid = ((domain.Recepcioner) sel).getIdRecepcioner();

                for (domain.Racun r : sviRacuni) {
                    if (r.getRecepcioner() != null && r.getRecepcioner().getIdRecepcioner() == rid) {
                        rezultat.add(r);
                    }
                }
                break;
            }

            case "vrsti usluge": {
                Object sel = jComboBoxStavkeKriterijuma.getSelectedItem();
                if (!(sel instanceof domain.VrstaUsluge)) { 
                    showError("Izaberi vrstu usluge."); 
                    return; 
                }
                int trazeniIdUsluge = ((domain.VrstaUsluge) sel).getIdUsluge();

                for (domain.Racun r : sviRacuni) {
                    boolean ima = false;

                    if (r.getStavke() != null) {
                        for (domain.StavkaRacuna s : r.getStavke()) {
                            if (s.getVrstaUsluge() != null &&
                                s.getVrstaUsluge().getIdUsluge() == trazeniIdUsluge) {
                                ima = true;
                                break;
                            }
                        }
                    } else {
                        try {
                            domain.Racun pun = controller.KlijentController
                                    .getInstance().getRacunById(r.getIdRacuna());
                            if (pun != null && pun.getStavke() != null) {
                                for (domain.StavkaRacuna s : pun.getStavke()) {
                                    if (s.getVrstaUsluge() != null &&
                                        s.getVrstaUsluge().getIdUsluge() == trazeniIdUsluge) {
                                        ima = true;
                                        break;
                                    }
                                }
                            }
                        } catch (Exception e) {
                            logger.log(java.util.logging.Level.WARNING,
                                    "Ne mogu da dovucem stavke za racun " + r.getIdRacuna(), e);
                        }
                    }

                    if (ima) rezultat.add(r);
                }
                break;
            }

            default: {
                showError("Nepoznat kriterijum.");
                return;
            }
        }

        setTableData(rezultat);
    } catch (Exception ex) {
        logger.log(java.util.logging.Level.SEVERE, "Greska pri filtriranju", ex);
        showError("Doslo je do greske pri pretrazi.");
    }
           
    }

    private void popuniComboBox(String kriterijum) {
        DefaultComboBoxModel<Object> model = new DefaultComboBoxModel<>();
    jComboBoxStavkeKriterijuma.setModel(model);

    try {
        switch (kriterijum) {
            case "recepcioneru": {
                java.util.ArrayList<domain.Recepcioner> lista =
                        controller.KlijentController.getInstance().getAllRecepcioner();
                lista.sort(java.util.Comparator
                        .comparing(domain.Recepcioner::getPrezime, String.CASE_INSENSITIVE_ORDER)
                        .thenComparing(domain.Recepcioner::getIme, String.CASE_INSENSITIVE_ORDER));
                for (domain.Recepcioner r : lista) model.addElement(r);
                break;
            }
            case "gostu": {
                java.util.ArrayList<domain.Gost> lista =
                        controller.KlijentController.getInstance().getAllGost();
                lista.sort(java.util.Comparator
                        .comparing(domain.Gost::getPrezime, String.CASE_INSENSITIVE_ORDER)
                        .thenComparing(domain.Gost::getIme, String.CASE_INSENSITIVE_ORDER));
                for (domain.Gost g : lista) model.addElement(g);
                break;
            }
            case "vrsti usluge": {
                List<VrstaUsluge> lista =
                        controller.KlijentController.getInstance().getAllVrstaUsluge();
                lista.sort(java.util.Comparator
                        .comparing(domain.VrstaUsluge::getNazivUsluge, String.CASE_INSENSITIVE_ORDER));
                for (domain.VrstaUsluge v : lista) model.addElement(v);
                break;
            }
            default: {
                break;
            }
        }
    } catch (Exception ex) {
        logger.log(java.util.logging.Level.SEVERE, "Greska pri ucitavanju stavki", ex);
        showError("Neuspelo ucitavanje stavki za kriterijum.");
    }
    }

    private LocalDate toLocalDate(Date date) {
            if (date == null) return null;
            if (date instanceof java.sql.Date) {
                return ((java.sql.Date) date).toLocalDate();
            }
            return java.time.Instant.ofEpochMilli(date.getTime())
                    .atZone(java.time.ZoneId.systemDefault())
                    .toLocalDate();    
    
    }
}
